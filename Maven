mvn clean install
mvn compile
mvn package - generate jar
mvn site -generate the documentation -> html in target directory 
mvn test -executes only test

if project is multi module and if you want to execute specific to module 

mvn -pl :ModuleName -am <maven-life-cycle>   ex : mvn -pl :PolicyNotification -am test
-pl project list
-am also make dependent things 

if you have a dependency of one module in other ?
add that module in pom under dependecy section, in dependent module. son that you can have access to it.

mvn dependency:tree - shows hierarachy 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
mvn clean: This command cleans the project by deleting the target directory. It removes all files generated by the previous build.

mvn compile: Compiles the source code of the project.

mvn test: Runs the tests for the project. Maven looks for tests in the src/test directory and executes them.

mvn package: Packages the compiled code (usually into a JAR or WAR file) and places it in the target directory.

mvn install: Installs the project's artifacts (JARs, WARs, etc.) into the local Maven repository. Other projects on the same machine can then use these artifacts as dependencies.

mvn deploy: Deploys the project's artifacts to a remote repository. This is often used for sharing artifacts across different environments or making them available to other developers.

mvn clean install: This is a common combination of commands. It cleans the project, compiles the code, runs tests, packages the artifacts, and installs them into the local Maven repository.

mvn dependency:tree: Displays the dependency tree for the project, showing all dependencies and their transitive dependencies. This is helpful for understanding the project's dependencies and resolving conflicts.

mvn archetype:generate: Generates a new Maven project from an archetype (a project template). Maven provides various archetypes for different types of projects, such as web applications, libraries, and more.

mvn help:effective-pom: Displays the effective POM (Project Object Model) for the project. This shows the final configuration after Maven has processed all inheritance, profiles, and properties.

mvn clean install -DskipTests: Cleans the project, compiles the code, packages the artifacts, and installs them into the local Maven repository, skipping the execution of tests. This can be useful when you need to quickly build and install artifacts without running tests.
